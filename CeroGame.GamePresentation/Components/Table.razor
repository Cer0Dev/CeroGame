@using CeroGame.GameService.GameLogic;
@using CeroGame.GameService.Models;
@using Microsoft.JSInterop;
@using MudBlazor
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@if (Player.Guid != Guid.Empty && GM is not null)
{

    @*    if (GM.AmountOfPlayers >= 2)
    {
        <div style="transform: rotate(180deg);">
            <CeroGame.GamePresentation.Components.Deck Table=this GM=GM Player="GM.Players[1]" />
        </div>

    }
    if (GM.AmountOfPlayers >= 3)
    {
        <div style="transform: rotate(90deg);">
            <CeroGame.GamePresentation.Components.Deck Table=this GM=GM Player="GM.Players[2]" />
        </div>

    }
    if (GM.AmountOfPlayers >= 4)
    {
        <div style="transform: rotate(-90deg);">
            <CeroGame.GamePresentation.Components.Deck Table=this GM=GM Player="GM.Players[3]" />
        </div>
*@
    if (GM.AmountOfPlayers >= 2)
    {
        <CeroGame.GamePresentation.Components.Deck Table=this GM=GM Player="GM.Players[(GM.Players.IndexOf(Player)+1) % GM.Players.Count ]" Position="1" />
    }
    <div class="row  align-items-center justify-content-center" style="padding-right: var(--card-width-normal);">

        <CeroGame.GamePresentation.Components.MainDeck Player=Player Table=this GM=GM />

        <CeroGame.GamePresentation.Components.MiddleDeck Player=Player Table=this GM=GM />
    </div>

    <CeroGame.GamePresentation.Components.Deck Table=this Hidden=false GM=GM Player="Player" />
    @*    <MudText>Them:</MudText>*@

}
@code {
    protected PlayerModel Player = new();
    [Inject]
    public IJSRuntime jsruntime { get; set; }
    [Parameter]
    public GameMaster? GM { get; set; }
    protected override void OnInitialized()
    {
        base.OnInitialized();


    }


    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (GM is not null)
        {
            GM.RefreshNeeded += Refresh;
            //GM.GameEnded += GameOver;
        }
        else
        {
            await jsruntime.InvokeVoidAsync("alert", "Game Failed to load: Invalid GameID");
            return;
        }
        var playerLookUp = (await ProtectedSessionStore.GetAsync<Guid>(GM.Guid.ToString()));
        if (!playerLookUp.Success)
        {
            var userGuid = Guid.NewGuid();
            await ProtectedSessionStore.SetAsync(GM.Guid.ToString(), userGuid);
            Player = GM.AddPlayer(userGuid);

        }
        else
        {
            Player = GM.GetPlayer(playerLookUp.Value);
        }

        ////StateHasChanged();
    }


    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (GM is not null && GM.GameOver)
        {
            await jsruntime.InvokeVoidAsync("alert", GM.CurrentPlayer?.Guid + " Has won the game");
        }

    }

    //await base.OnParametersSetAsync();
    //    if (GM.GameOver)
    //    {
    //        await jsruntime.InvokeVoidAsync("alert", GM.CurrentPlayer.Guid + " Has won the game");
    //}

    //public async void GameOver(object? sender, bool gameOver) => await InvokeAsync(async () =>
    //{
    //        if (GM is not null && GM.GameOver)
    //        {
    //            await jsruntime.InvokeVoidAsync("alert", GM?.CurrentPlayer!.Guid + " Has won the game");
    //        }


    //});
    public async void Refresh(object? sender, System.EventArgs e) => await InvokeAsync(() =>
    {
        StateHasChanged();

    });


}

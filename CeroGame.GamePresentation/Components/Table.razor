@using CeroGame.GameService.GameLogic;
@using CeroGame.GameService.Models;
@using MudBlazor
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore


@Player.Guid;
Isplayer: @Player.Cards.Any();
<CeroGame.GamePresentation.Components.MainDeck Table=this GM=GM />

<CeroGame.GamePresentation.Components.MiddleDeck Table=this GM=GM />
<MudText>ME:</MudText>
<CeroGame.GamePresentation.Components.Deck Table=this Hidden=false GM=GM Cards="GM.P1" />
<MudText>Them:</MudText>
<CeroGame.GamePresentation.Components.Deck Table=this GM=GM Cards="GM.P2" />
@code {
    private PlayerModel Player = new();

    [Parameter]
    public GameMaster GM { get; set; }
    protected override void OnInitialized()
    {
        base.OnInitialized();

        GM.RefreshNeeded += Refresh;

    }

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        //if (!(await ProtectedSessionStore.GetAsync<Guid>(GM.SessionIdKey)).Success)
        //{
        //    await ProtectedSessionStore.SetAsync(GM.SessionIdKey, Guid.NewGuid().ToString());
        //    //Player = GM.AddPlayer((await ProtectedSessionStore.GetAsync<Guid>(GM.SessionIdKey)).Value);

        //}
        //else
        //{
        //    //Player = GM.GetPlayer((await ProtectedSessionStore.GetAsync<Guid>(GM.SessionIdKey)).Value);
        //}
        ////StateHasChanged();
    }

    public bool hasRefreshed;

    public async void Refresh(object? sender, System.EventArgs e) => await InvokeAsync(() =>
    {
        StateHasChanged();
        hasRefreshed = true;

    });


}
